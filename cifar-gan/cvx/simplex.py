"""
A top-level linear programming interface. Currently this interface only
solves linear programming problems via the Simplex Method.
.. versionadded:: 0.15.0
Functions
---------
.. autosummary::
   :toctree: generated/
    linprog
    linprog_verbose_callback
    linprog_terse_callback
"""

from __future__ import division, print_function, absolute_import



__all__ = ['linprog', 'linprog_verbose_callback', 'linprog_terse_callback']

__docformat__ = "restructuredtext en"

def _pivot_col(T, tol=1.0E-12, bland=False):

    ma = np.ma.masked_where(T[-1, :-1] >= -tol, T[-1, :-1], copy=False)
    if ma.count() == 0:
        return False, np.nan
    if bland:
        return True, np.where(ma.mask == False)[0][0]
    return True, np.ma.where(ma == ma.min())[0][0]


def _pivot_row(T, basis, pivcol, phase, tol=1.0E-12, bland=False):

    if phase == 1:
        k = 2
    else:
        k = 1
    ma = np.ma.masked_where(T[:-k, pivcol] <= tol, T[:-k, pivcol], copy=False)
    #print (ma)
    if ma.count() == 0:
        return False, np.nan
    mb = np.ma.masked_where(T[:-k, pivcol] <= tol, T[:-k, -1], copy=False)
    q = mb / ma
    min_rows = np.ma.where(q == q.min())[0]
    #print (q)
    #print (min_rows)
    if bland:
        return True, min_rows[np.argmin(np.take(basis, min_rows))]
    return True, min_rows[0]


def _solve_simplex(T, n, basis, maxiter=1000, phase=2, callback=None,
                   tol=1.0E-12, nit0=0, bland=False):

    nit = nit0
    complete = False

    if phase == 1:
        m = T.shape[0]-2
    elif phase == 2:
        m = T.shape[0]-1
    else:
        raise ValueError("Argument 'phase' to _solve_simplex must be 1 or 2")

    if phase == 2:
        # Check if any artificial variables are still in the basis.
        # If yes, check if any coefficients from this row and a column
        # corresponding to one of the non-artificial variable is non-zero.
        # If found, pivot at this term. If not, start phase 2.
        # Do this for all artificial variables in the basis.
        # Ref: "An Introduction to Linear Programming and Game Theory"
        # by Paul R. Thie, Gerard E. Keough, 3rd Ed,
        # Chapter 3.7 Redundant Systems (pag 102)
        for pivrow in [row for row in range(basis.size)
                       if basis[row] > T.shape[1] - 2]:
            non_zero_row = [col for col in range(T.shape[1] - 1)
                            if T[pivrow, col] != 0]

            #print("-----------------------2--------------------------")
            #print(basis)
            if len(non_zero_row) > 0:
                pivcol = non_zero_row[0]
                # variable represented by pivcol enters
                # variable in basis[pivrow] leaves
                basis[pivrow] = pivcol
                pivval = T[pivrow][pivcol]
                T[pivrow, :] = T[pivrow, :] / pivval
                for irow in range(T.shape[0]):
                    if irow != pivrow:
                        T[irow, :] = T[irow, :] - T[pivrow, :]*T[irow, pivcol]
                nit += 1

    if len(basis[:m]) == 0:
        solution = np.zeros(T.shape[1] - 1, dtype=np.float64)
    else:
        solution = np.zeros(max(T.shape[1] - 1, max(basis[:m]) + 1),
                            dtype=np.float64)


    while not complete:
        # Find the pivot column
        pivcol_found, pivcol = _pivot_col(T, tol, bland)
        if not pivcol_found:
            #print("---successfully-----")
            #print(T)
            pivcol = np.nan
            pivrow = np.nan
            status = 0
            complete = True
        else:
            # Find the pivot row
            pivrow_found, pivrow = _pivot_row(T, basis, pivcol, phase, tol, bland)
            if not pivrow_found:
                status = 3
                complete = True


        if not complete:
            if nit >= maxiter:
                # Iteration limit exceeded
                status = 1
                complete = True
            else:
                # variable represented by pivcol enters
                # variable in basis[pivrow] leaves
                basis[pivrow] = pivcol
                pivval = T[pivrow][pivcol]
                T[pivrow, :] = T[pivrow, :] / pivval
                for irow in range(T.shape[0]):
                    if irow != pivrow:
                        T[irow, :] = T[irow, :] - T[pivrow, :]*T[irow, pivcol]
                nit += 1
                #print (basis)
                #print([pivrow,pivcol])
                #print(T)

    #print (nit,status)
    return nit, status


def _linprog_simplex(c, A_ub=None, b_ub=None, A_eq=None, b_eq=None,
                     bounds=None, maxiter=1000, disp=False, callback=None,
                     tol=1.0E-12, bland=False, **unknown_options):


    status = 0
    messages = {0: "Optimization terminated successfully.",
                1: "Iteration limit reached.",
                2: "Optimization failed. Unable to find a feasible"
                   " starting point.",
                3: "Optimization failed. The problem appears to be unbounded.",
                4: "Optimization failed. Singular matrix encountered."}
    have_floor_variable = False

    cc = np.asarray(c)
    # The initial value of the objective function element in the tableau
    f0 = 0

    # The number of variables as given by c
    n = len(c)

    # Convert the input arguments to arrays (sized to zero if not provided)
    Aeq = np.asarray(A_eq) if A_eq is not None else np.empty([0, len(cc)])
    Aub = np.asarray(A_ub) if A_ub is not None else np.empty([0, len(cc)])
    beq = np.ravel(np.asarray(b_eq)) if b_eq is not None else np.empty([0])
    bub = np.ravel(np.asarray(b_ub)) if b_ub is not None else np.empty([0])

    # Analyze the bounds and determine what modifications to be made to
    # the constraints in order to accommodate them.
    L = np.zeros(n, dtype=np.float64)
    U = np.ones(n, dtype=np.float64)*np.inf
    if bounds is None or len(bounds) == 0:
        pass
    elif len(bounds) == 2 and not hasattr(bounds[0], '__len__'):
        # All bounds are the same
        a = bounds[0] if bounds[0] is not None else -np.inf
        b = bounds[1] if bounds[1] is not None else np.inf
        L = np.asarray(n*[a], dtype=np.float64)
        U = np.asarray(n*[b], dtype=np.float64)
    else:
        if len(bounds) != n:
            status = -1
            message = ("Invalid input for linprog with method = 'simplex'.  "
                       "Length of bounds is inconsistent with the length of c")
        else:
            try:
                for i in range(n):
                    if len(bounds[i]) != 2:
                        raise IndexError()
                    L[i] = bounds[i][0] if bounds[i][0] is not None else -np.inf
                    U[i] = bounds[i][1] if bounds[i][1] is not None else np.inf
            except IndexError:
                status = -1
                message = ("Invalid input for linprog with "
                           "method = 'simplex'.  bounds must be a n x 2 "
                           "sequence/array where n = len(c).")

    if np.any(L == -np.inf):
        # If any lower-bound constraint is a free variable
        # add the first column variable as the "floor" variable which
        # accommodates the most negative variable in the problem.
        n = n + 1
        L = np.concatenate([np.array([0]), L])
        U = np.concatenate([np.array([np.inf]), U])
        cc = np.concatenate([np.array([0]), cc])
        Aeq = np.hstack([np.zeros([Aeq.shape[0], 1]), Aeq])
        Aub = np.hstack([np.zeros([Aub.shape[0], 1]), Aub])
        have_floor_variable = True

    # Now before we deal with any variables with lower bounds < 0,
    # deal with finite bounds which can be simply added as new constraints.
    # Also validate bounds inputs here.
    for i in range(n):
        if(L[i] > U[i]):
            status = -1
            message = ("Invalid input for linprog with method = 'simplex'.  "
                       "Lower bound %d is greater than upper bound%d" % (i, i))

        if np.isinf(L[i]) and L[i] > 0:
            status = -1
            message = ("Invalid input for linprog with method = 'simplex'.  "
                       "Lower bound may not be +infinity")

        if np.isinf(U[i]) and U[i] < 0:
            status = -1
            message = ("Invalid input for linprog with method = 'simplex'.  "
                       "Upper bound may not be -infinity")

        if np.isfinite(L[i]) and L[i] > 0:
            # Add a new lower-bound (negative upper-bound) constraint
            Aub = np.vstack([Aub, np.zeros(n)])
            Aub[-1, i] = -1
            bub = np.concatenate([bub, np.array([-L[i]])])
            L[i] = 0

        if np.isfinite(U[i]):
            # Add a new upper-bound constraint
            Aub = np.vstack([Aub, np.zeros(n)])
            Aub[-1, i] = 1
            bub = np.concatenate([bub, np.array([U[i]])])
            U[i] = np.inf

    # Now find negative lower bounds (finite or infinite) which require a
    # change of variables or free variables and handle them appropriately
    for i in range(0, n):
        if L[i] < 0:
            if np.isfinite(L[i]) and L[i] < 0:
                # Add a change of variables for x[i]
                # For each row in the constraint matrices, we take the
                # coefficient from column i in A,
                # and subtract the product of that and L[i] to the RHS b
                beq = beq - Aeq[:, i] * L[i]
                bub = bub - Aub[:, i] * L[i]
                # We now have a nonzero initial value for the objective
                # function as well.
                f0 = f0 - cc[i] * L[i]
            else:
                # This is an unrestricted variable, let x[i] = u[i] - v[0]
                # where v is the first column in all matrices.
                Aeq[:, 0] = Aeq[:, 0] - Aeq[:, i]
                Aub[:, 0] = Aub[:, 0] - Aub[:, i]
                cc[0] = cc[0] - cc[i]

        if np.isinf(U[i]):
            if U[i] < 0:
                status = -1
                message = ("Invalid input for linprog with "
                           "method = 'simplex'.  Upper bound may not be -inf.")

    # The number of upper bound constraints (rows in A_ub and elements in b_ub)
    mub = len(bub)

    # The number of equality constraints (rows in A_eq and elements in b_eq)
    meq = len(beq)

    # The total number of constraints
    m = mub+meq

    # The number of slack variables (one for each upper-bound constraints)
    n_slack = mub

    # The number of artificial variables (one for each lower-bound and equality
    # constraint)
    n_artificial = meq + np.count_nonzero(bub < 0)

    try:
        Aub_rows, Aub_cols = Aub.shape
    except ValueError:
        raise ValueError("Invalid input.  A_ub must be two-dimensional")

    try:
        Aeq_rows, Aeq_cols = Aeq.shape
    except ValueError:
        raise ValueError("Invalid input.  A_eq must be two-dimensional")

    if Aeq_rows != meq:
        status = -1
        message = ("Invalid input for linprog with method = 'simplex'.  "
                   "The number of rows in A_eq must be equal "
                   "to the number of values in b_eq")

    if Aub_rows != mub:
        status = -1
        message = ("Invalid input for linprog with method = 'simplex'.  "
                   "The number of rows in A_ub must be equal "
                   "to the number of values in b_ub")

    if Aeq_cols > 0 and Aeq_cols != n:
        status = -1
        message = ("Invalid input for linprog with method = 'simplex'.  "
                   "Number of columns in A_eq must be equal "
                   "to the size of c")

    if Aub_cols > 0 and Aub_cols != n:
        status = -1
        message = ("Invalid input for linprog with method = 'simplex'.  "
                   "Number of columns in A_ub must be equal to the size of c")

    if status != 0:
        # Invalid inputs provided
        raise ValueError(message)

    # Create the tableau
    T = np.zeros([m+2, n+n_slack+n_artificial+1])

    # Insert objective into tableau
    T[-2, :n] = cc
    T[-2, -1] = f0

    b = T[:-2, -1]

    if meq > 0:
        # Add Aeq to the tableau
        T[:meq, :n] = Aeq
        # Add beq to the tableau
        b[:meq] = beq
    if mub > 0:
        # Add Aub to the tableau
        T[meq:meq+mub, :n] = Aub
        # At bub to the tableau
        b[meq:meq+mub] = bub
        # Add the slack variables to the tableau
        np.fill_diagonal(T[meq:m, n:n+n_slack], 1)

    # Further set up the tableau.
    # If a row corresponds to an equality constraint or a negative b (a lower
    # bound constraint), then an artificial variable is added for that row.
    # Also, if b is negative, first flip the signs in that constraint.
    slcount = 0
    avcount = 0
    basis = np.zeros(m, dtype=int)
    r_artificial = np.zeros(n_artificial, dtype=int)
    for i in range(m):
        if i < meq or b[i] < 0:
            # basic variable i is in column n+n_slack+avcount
            basis[i] = n+n_slack+avcount
            r_artificial[avcount] = i
            avcount += 1
            if b[i] < 0:
                b[i] *= -1
                T[i, :-1] *= -1
            T[i, basis[i]] = 1
            T[-1, basis[i]] = 1
        else:
            # basic variable i is in column n+slcount
            basis[i] = n+slcount
            slcount += 1

    # Make the artificial variables basic feasible variables by subtracting
    # each row with an artificial variable from the Phase 1 objective
    for r in r_artificial:
        T[-1, :] = T[-1, :] - T[r, :]

    print(T)
    print(basis)
    nit1, status = _solve_simplex(T, n, basis, phase=1, callback=callback,
                                  maxiter=maxiter, tol=tol, bland=bland)

    # if pseudo objective is zero, remove the last row from the tableau and
    # proceed to phase 2
    if abs(T[-1, -1]) < tol:
        # Remove the pseudo-objective row from the tableau
        T = T[:-1, :]
        # Remove the artificial variable columns from the tableau
        T = np.delete(T, np.s_[n+n_slack:n+n_slack+n_artificial], 1)
    else:
        # Failure to find a feasible starting point
        status = 2

    if status != 0:
        message = messages[status]
        if disp:
            print(message)
        return OptimizeResult(x=np.nan, fun=-T[-1, -1], nit=nit1,
                              status=status, message=message, success=False)

    # Phase 2
    print("---------first end------------")
    print(basis)
    print(T)
    nit2, status = _solve_simplex(T, n, basis, maxiter=maxiter-nit1, phase=2,
                                  callback=callback, tol=tol, nit0=nit1,
                                  bland=bland)

    print(basis)

    print(T[-1,-1])

    solution = np.zeros(n+n_slack+n_artificial)
    solution[basis[:m]] = T[:m, -1]

    #print(solution)
    x = solution[:n]
    #print(x)
    slack = solution[n:n+n_slack]

    # For those variables with finite negative lower bounds,
    # reverse the change of variables
    masked_L = np.ma.array(L, mask=np.isinf(L), fill_value=0.0).filled()
    x = x + masked_L

    # For those variables with infinite negative lower bounds,
    # take x[i] as the difference between x[i] and the floor variable.
    if have_floor_variable:
        for i in range(1, n):
            if np.isinf(L[i]):
                x[i] -= x[0]
        x = x[1:]

    # Optimization complete at this point
    obj = -T[-1, -1]

    if status in (0, 1):
        if disp:
            print(messages[status])
            print("         Current function value: {0: <12.6f}".format(obj))
            print("         Iterations: {0:d}".format(nit2))
    else:
        if disp:
            print(messages[status])
            print("         Iterations: {0:d}".format(nit2))


    return OptimizeResult(x=x, fun=obj, nit=int(nit2), status=status,
                          slack=slack, message=messages[status],
                          success=(status == 0))


def linprog(c, A_ub=None, b_ub=None, A_eq=None, b_eq=None,
            bounds=None, method='simplex', callback=None,
            options=None):


    meth = method.lower()
    if options is None:
        options = {}

    if meth == 'simplex':
        return _linprog_simplex(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq,
                                bounds=bounds, callback=callback, **options)
    elif meth == 'interior-point':
        return _linprog_ip(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq,
                           bounds=bounds, callback=callback, **options)
    else:
        raise ValueError('Unknown solver %s' % method)


if __name__=="__main__":
    import numpy as np
    batch_size = 64

    a1 = np.zeros([batch_size*batch_size,batch_size]);
    a2 = np.zeros([batch_size*batch_size,batch_size])
    for i in range(batch_size):
        a1[batch_size*i:batch_size*(i+1),i] = 1
        a2[batch_size*i:batch_size*(i+1),:] = np.eye(batch_size,batch_size)
    A = np.concatenate((a1,a2),axis=1)
    A = A.T

    c = [8.96895,2.08734,3.29051,5.58724,14.2925,7.53161,7.08127,5.46176,1.74436,4.87526,5.51258,6.01816,7.20495,3.02593,1.28486,5.55903,3.56926,15.3916,1.88525,0.938778,7.70889,7.20652,1.03319,4.6117,0.0957405,6.25388,0.2274,4.70797,4.55219,1.46984,14.4143,4.19647,18.1179,4.51289,8.25177,7.56884,7.50322,7.09867,2.96302,10.4245,0.274309,2.47367,4.13858,10.3316,7.4193,6.79952,1.74345,3.38822,1.39199,2.92493,3.60994,14.504,7.55869,14.4307,3.69922,6.71118,3.96171,4.53458,2.68806,7.26989,13.0325,7.37053,1.77492,10.9466,7.39014,1.68954,1.43016,4.22478,3.0513,1.87983,22.7603,22.7099,0.770433,9.87587,3.00667,12.9353,7.43029,7.28209,9.25952,4.94227,30.0466,9.82174,15.8732,5.59102,15.8512,8.50192,6.12234,1.93357,14.756,6.77753,4.83988,9.32464,7.86621,1.57011,1.7428,8.1432,7.98581,12.2269,4.84789,3.98295,14.8306,5.16109,3.4122,5.38888,8.66543,3.7255,0.303683,12.7334,4.6518,6.2232,3.30973,2.91347,2.58796,14.8092,10.2858,6.48729,6.24194,7.45378,2.57479,5.02201,13.9087,5.37264,11.9438,2.65985,4.36828,7.56265,9.30678,4.23895,6.77975,5.89274,21.4179,14.2575,1.01435,6.82337,7.19982,1.19993,7.95338,11.0771,6.87054,18.3913,9.46082,2.88379,4.75736,8.38577,16.2389,7.35085,17.9163,10.2955,13.0485,13.5413,0.0131122,11.8975,1.37159,14.7344,6.36096,13.5929,8.24321,2.89322,13.039,2.07905,17.0674,9.54687,18.8829,3.81693,1.19649,11.7723,2.40435,5.84593,7.47307,0.620236,1.82748,14.4395,0.977449,8.69009,7.36251,26.2621,13.3227,1.91708,5.40314,12.8901,14.2089,6.0552,3.16987,13.8501,18.6658,3.65644,13.3638,2.49435,1.98196,10.6085,14.8688,18.9053,3.33602,5.91687,10.266,18.5628,5.03511,10.9124,11.8791,3.04502,6.74026,1.72583,13.8832,2.95795,10.6049,7.16121,11.2429,1.26303,13.971,4.14211,10.3441,6.07821,4.08191,7.79155,22.4702,21.3523,7.24926,4.37245,20.5646,2.65458,0.448337,2.34076,4.01411,12.0785,4.22922,9.29994,9.10278,1.5059,7.68046,2.62509,18.9128,1.48218,6.90772,11.1196,1.23318,0.757141,0.552967,13.1976,20.2941,4.00958,1.23547,6.51899,12.5243,7.60042,8.82974,10.4014,3.72316,1.20785,3.0365,4.88039,4.94842,1.63159,2.05602,10.9436,4.03893,16.248,1.10118,6.37997,10.8109,8.33517,2.58567,16.0716,3.5205,13.4147,10.3706,9.39542,9.8078,4.62994,19.3618,3.30381,6.92677,11.7836,2.80136,6.57073,6.23935,19.7476,9.2319,2.42772,5.969,3.38604,1.74385,3.99395,3.2829,0.844263,11.559,1.7818,4.82908,7.2136,3.10187,36.2026,7.58972,9.15556,9.44632,3.59415,4.37251,13.2059,3.25919,0.0168286,7.44197,18.7669,11.7056,9.10418,21.8829,1.74233,4.51111,4.06223,11.7926,10.3266,13.5145,0.579053,4.93523,0.980688,5.13185,15.7557,3.63822,9.19166,4.11214,6.94209,19.0195,17.6131,8.0681,15.8827,2.22414,2.87278,16.1912,1.13346,0.394602,17.3727,3.82472,6.01512,4.53496,5.94293,20.0448,6.51872,8.1947,5.75999,6.37653,11.1785,0.904167,2.95773,11.9563,10.8557,0.783105,10.6269,0.622064,33.4764,15.1722,6.2763,1.75638,14.7224,12.1107,5.54252,6.76776,5.04299,1.48537,3.56729,10.4431,3.99999,8.08662,3.33287,7.38692,0.297145,6.13507,17.1492,3.47095,5.79277,6.16321,10.9212,9.08277,0.758128,8.33558,5.34787,6.82889,5.47443,0.605043,3.51582,9.09081,0.879249,2.4283,28.9578,6.8642,13.3687,12.7745,3.06433,3.44756,2.95185,1.23882,11.5892,11.1474,11.6909,0.947682,5.29231,7.42161,15.8149,2.85252,7.06835,9.85749,7.87595,1.38949,4.47701,8.0099,2.0839,15.4615,8.64887,10.5348,1.40812,3.24215,2.22862,1.29941,0.426323,10.8693,8.43089,0.157335,2.76507,12.5895,0.608712,18.7616,7.68657,4.28827,6.10195,19.3886,10.0536,12.0423,11.2247,6.42128,2.62987,1.11171,19.4568,7.02415,16.6221,8.47045,1.95296,3.97468,0.447238,1.22073,7.11825,1.91079,9.96471,7.15107,3.88916,6.63275,0.974599,7.17162,8.11514,7.67572,8.92585,13.3721,5.18023,3.71879,0.149266,2.35255,6.94536,12.1501,11.5574,5.65819,9.24428,19.2843,4.8452,20.2692,8.92605,15.6016,9.15764,0.628496,4.21773,5.81042,20.69,6.07162,3.56565,1.54754,0.285674,7.49403,5.68499,6.96004,2.62302,5.39224,3.40629,10.4773,10.6846,1.91434,16.6098,3.10085,6.35907,0.02148,1.67211,10.8879,3.83123,24.006,0.895296,5.94605,10.3511,13.031,7.29361,11.3902,11.5433,4.14974,15.7456,18.9066,7.29258,3.00606,8.45928,11.4947,8.8618,4.73243,22.4633,2.73199,15.3693,10.5065,8.79321,0.912933,3.59386,17.3474,3.0299,16.3605,2.04662,15.7705,15.6069,8.89166,2.42959,17.3033,13.8341,1.94569,14.2317,3.53741,2.98748,4.4298,0.565262,3.69116,12.4305,4.00626,18.0809,0.957128,6.47213,2.01588,2.60081,7.41388,4.86586,13.1751,2.22472,3.00481,8.28339,7.27111,5.08023,2.2718,8.34781,9.4502,7.78886,2.15464,3.95605,0.982255,8.89078,5.51945,1.4454,18.4758,11.1637,12.6148,15.14,3.757,21.2419,0.0989137,2.53821,7.01765,2.95989,9.62621,2.80535,2.29018,1.53332,6.47564,18.4582,17.7489,2.56154,6.28981,12.6252,3.83371,12.6116,13.2115,13.6839,8.44213,0.474611,1.47747,0.840159,2.89748,14.5793,4.48933,17.6071,6.65995,16.6812,14.9926,5.3744,18.32,1.43209,6.12098,3.74007,18.6872,7.19143,6.21032,13.31,5.74528,3.31817,2.27604,3.64485,15.8003,5.70265,5.49598,4.53177,1.64963,2.08713,3.29687,16.1165,3.1031,8.35523,2.21777,4.76205,14.1042,6.52831,5.85397,9.8707,13.4736,19.4569,8.24728,14.751,2.75797,15.1187,1.02454,10.666,2.90932,2.09343,2.76751,1.25981,2.31059,9.87023,20.0516,8.25398,3.87898,8.95736,11.0263,6.15461,8.85323,3.74168,22.3326,0.712996,3.72142,30.141,5.61519,5.29689,8.46688,9.22439,20.9954,8.96044,19.6564,8.08588,20.9301,1.87945,9.39244,18.0278,3.05876,8.27546,15.9622,5.96482,4.30731,2.54494,10.4826,1.3171,7.82788,2.52919,9.79971,3.60968,25.5929,6.36665,22.3022,0.889438,8.10627,8.11075,15.0993,7.4692,10.0333,0.632446,16.8851,1.44622,12.0953,1.55159,1.5989,16.8428,4.83523,2.45877,12.514,4.47831,0.287042,13.6425,21.7881,0.436142,9.13709,7.39802,4.21393,14.0207,23.0162,5.91031,0.383207,14.8294,5.5298,3.20017,9.16796,0.961931,2.29926,1.04871,6.47957,3.0256,17.9155,6.30607,4.46215,2.00488,0.695639,2.06146,3.37949,8.77658,10.5675,8.63343,8.17088,15.2963,1.19298,17.7014,8.90754,17.6971,1.48128,6.46502,4.84845,4.93865,1.51211,7.58858,2.56433,4.83039,13.4831,1.98918,9.04063,0.4927,0.240659,1.75419,1.87202,25.5433,4.13534,3.1042,17.6498,1.97194,4.28646,7.96658,12.9548,17.7418,7.60165,6.30842,0.464135,7.86793,3.86173,7.10248,4.10258,11.8338,1.42894,15.1532,4.44068,14.0095,15.6018,7.40498,15.1427,10.5444,3.09833,4.99689,5.406,17.961,12.0116,9.15659,0.345381,7.74407,3.75255,0.570601,6.92337,0.411396,14.8289,2.37763,21.0936,3.09043,0.892388,3.11779,5.85339,15.9299,3.72734,15.4249,2.99146,9.28909,2.02789,17.0538,9.11253,2.29265,1.94416,8.17235,6.55273,3.37497,2.39302,3.30981,5.23802,1.14752,2.37302,0.410976,1.10819,0.0445692,9.9139,10.9449,2.2311,3.6002,10.3386,4.81372,5.14489,6.92255,5.32162,18.8294,7.00056,0.825732,0.0632007,1.20368,0.893709,11.3632,6.58461,1.69302,5.73068,15.5046,6.8188,12.9799,2.44575,11.9345,9.91769,11.9578,4.32245,1.92247,1.99288,8.67138,4.62281,0.699363,10.3596,14.0552,4.28182,10.0656,10.9503,5.42026,4.96405,15.5299,8.44571,6.15197,2.43893,6.84831,16.3387,12.8579,12.6729,16.4959,9.53014,19.0592,11.5141,16.0403,0.0980162,4.44174,6.92916,11.4582,3.33989,3.26714,4.40889,0.64218,2.04617,1.56649,10.922,8.27237,1.79963,4.54783,5.14926,11.9435,18.0746,4.94796,4.97954,17.9815,3.11974,10.5453,10.0707,5.77283,2.09609,6.7389,5.04418,16.0542,8.64724,1.24286,1.11242,22.1775,4.83542,6.74083,2.05836,6.51093,20.8262,13.0749,1.23545,12.4981,2.52724,12.7614,8.26841,2.51138,10.7899,9.75699,7.26803,6.86261,7.61434,11.1804,11.3898,3.5384,9.64482,0.783078,7.28195,6.89702,0.0414089,1.27577,25.1229,6.30865,1.32043,16.7726,10.2201,6.63884,4.63704,17.7528,2.78218,7.41658,10.3708,4.34935,2.43451,4.97464,18.6181,20.6567,10.8165,4.72282,15.0237,0.079292,17.9814,17.6074,4.80287,5.25373,1.16438,11.2607,10.4034,5.35837,8.46205,6.53185,6.72753,0.389351,2.84802,5.38835,6.38581,21.028,10.7418,7.20813,8.99126,4.07769,0.713097,5.86773,6.78497,7.33344,2.01041,8.73594,2.49287,2.40251,14.6227,8.34576,4.13504,6.26171,5.06257,9.32867,14.7729,24.0507,3.48442,15.369,8.62733,6.49079,10.5154,13.8288,0.457708,19.9291,14.9737,9.83087,4.87901,6.80286,1.24601,5.26099,19.76,8.38519,3.76347,2.83748,16.1779,5.35891,8.02658,1.4979,18.4392,3.72602,0.05478,5.37468,9.98397,8.41424,17.9197,8.47815,16.1631,9.76739,15.609,12.2281,2.14209,7.61051,23.8343,5.01669,19.4912,2.696,8.81707,11.4892,5.4873,11.1791,5.15906,4.35881,11.5435,4.15384,1.98171,0.864797,6.29368,5.90463,21.2635,0.330164,5.12648,8.8234,4.60143,6.1605,4.22811,13.7423,17.6593,9.04456,5.59964,10.8457,0.487314,4.90009,4.60306,9.44808,9.00363,8.75972,3.50421,9.87885,1.8229,4.34624,5.34915,4.52472,4.12526,3.92595,2.42106,9.30606,1.69814,9.03565,9.15193,20.5904,7.56361,16.1384,2.58768,6.37278,5.54728,9.06431,6.36709,5.47538,1.4208,5.08444,7.7054,16.6714,10.1342,12.6981,16.9379,15.9424,3.943,28.6318,12.1841,8.82717,5.03489,8.85053,14.0723,0.352818,0.869993,2.72142,13.5984,3.70085,15.0554,0.275323,11.2179,4.29967,19.3449,7.84121,6.8806,10.4866,18.413,4.52975,2.62819,2.43849,2.77785,2.29834,11.4419,2.84494,3.1688,27.6811,7.19753,8.99729,22.6004,6.26123,2.01162,7.08422,2.29142,11.2383,5.0237,4.45696,2.41741,5.13144,3.3546,9.66821,19.664,2.54057,6.9546,3.08486,3.71962,2.05777,17.8734,10.4443,10.4124,8.74576,26.0542,24.0608,16.3014,6.62495,3.2466,3.11595,4.39047,3.7736,0.10441,3.54297,2.38174,2.87944,7.02227,12.8356,16.8146,19.7975,7.14679,5.76976,18.9857,18.1521,15.1541,2.29489,2.22158,0.0454502,2.82552,0.590698,3.83057,8.90489,3.24446,15.5723,28.0623,10.31,8.81534,9.10993,1.74229,17.5928,10.5668,3.14673,2.81703,14.7699,2.42219,9.22038,3.82094,1.45114,7.79489,0.889014,3.85697,12.3556,1.93239,0.640569,8.46468,6.41467,10.2262,11.2152,3.44819,1.50216,6.1566,5.41706,13.0869,19.0236,3.34754,4.19762,23.8475,7.53401,12.8969,8.49435,1.92851,3.16681,2.94201,3.79494,14.1657,2.95902,3.49589,1.51816,6.26996,14.7338,15.9114,2.56464,3.96089,4.54322,7.97861,6.60972,5.25962,9.01224,3.94983,6.73738,3.45614,4.86594,0.457367,6.9318,2.91933,9.74537,3.08809,16.7387,10.9915,14.0829,11.5048,3.14638,19.8756,2.0942,6.96802,5.6053,12.0846,1.16708,14.3778,7.7042,12.876,7.60151,15.7985,14.4004,21.9261,6.37996,2.14789,12.4938,13.5731,11.1322,1.99072,8.96713,2.86856,5.89675,0.813111,11.4673,6.70986,11.1156,5.70503,2.28445,8.07115,1.84266,10.9363,4.05388,1.4112,3.83915,14.2064,2.96143,5.17582,3.93587,15.4855,3.82286,25.9256,8.62476,5.80426,8.7501,3.92944,0.571554,1.80651,0.538513,10.1063,13.4997,5.8057,7.18441,19.2828,4.42923,4.80415,23.4505,1.56982,2.60397,10.2647,8.59579,10.5088,17.5692,13.6719,5.25693,11.2857,2.42358,10.7037,6.26536,2.91968,4.13799,7.53436,17.0452,9.93646,12.3791,1.57267,7.11788,3.99864,14.7058,1.10876,5.38643,1.54584,16.1612,6.42441,8.52986,9.74453,7.77711,2.74807,10.4345,8.10472,13.0334,4.63212,6.80478,13.8657,2.61661,18.6397,9.81868,8.9744,2.62609,5.5777,13.23,0.850428,38.5046,18.7077,3.2355,6.50197,5.31976,14.0175,3.06648,2.94439,14.8342,9.10342,12.7976,11.3475,9.74209,19.4327,7.58809,5.94823,11.0124,1.98068,5.58113,11.9577,2.5424,10.3963,13.0795,7.2655,0.253462,6.27634,8.4642,11.5727,17.4141,3.29887,17.2666,0.347746,6.413,4.43923,8.10723,7.92945,3.04082,3.62011,4.16446,5.08816,8.95633,10.1043,8.93009,4.91038,13.6709,10.4439,3.93091,13.2194,23.8293,4.92694,19.3864,5.97278,16.9287,15.0795,22.0448,6.22383,5.24377,1.30562,7.9939,16.9433,8.07754,16.0739,4.08909,1.27837,14.664,11.0862,10.9118,4.70852,14.5666,4.91104,14.584,4.75215,13.5536,6.76224,13.83,0.416474,4.31254,6.90431,3.32452,19.045,12.5684,12.3755,13.9901,1.64314,3.25296,7.08916,0.725172,8.57541,1.52041,5.94826,1.62789,16.5077,9.48365,6.00431,11.2156,17.8089,3.27639,5.05142,13.3863,2.38255,4.778,7.21951,11.3767,1.45597,5.44522,12.5861,15.7322,2.83227,2.43899,0.717861,7.50962,15.3258,12.5399,6.48505,21.6961,2.299,15.7862,18.6477,10.7173,6.07575,1.29957,2.81195,12.1104,14.7326,19.4442,4.68735,10.8017,16.3904,14.8846,6.27639,6.47806,18.1423,17.6177,12.8671,4.93543,8.69613,4.23276,1.06896,13.9779,0.507447,2.30244,20.9064,13.172,16.7434,1.22036,4.51032,2.60809,6.50689,5.88874,13.0682,3.12528,17.2015,9.66081,2.83398,14.1336,6.80429,2.58654,13.3271,20.5553,5.13537,13.8807,0.568095,5.82541,5.71013,8.07634,15.2263,13.9937,19.1751,7.35793,22.2235,12.3111,2.0115,5.48078,8.50504,13.4046,8.65755,2.56073,0.186492,3.68235,6.67301,11.0559,5.30224,0.260229,4.63945,15.6475,10.1906,18.6874,5.77259,16.1114,1.64833,2.92798,6.38286,5.03915,8.37653,10.0203,5.53315,1.6699,1.33522,6.70919,11.1167,3.3805,5.61008,8.88269,11.7761,4.86025,1.77634,3.94202,14.8806,7.70481,8.5785,31.6316,15.1289,25.237,19.9057,2.56141,9.88624,7.7393,2.61119,9.47591,2.53725,8.09113,6.78304,10.6029,12.5058,6.05037,4.61496,13.9228,16.2905,7.01101,5.55298,11.4244,0.439443,0.664919,11.1744,14.6262,10.7088,4.74014,6.58144,15.6504,4.39207,5.64554,11.0718,12.1828,14.4963,8.99659,7.21813,4.02276,12.1049,2.61969,19.2784,11.7419,15.8197,3.3222,0.361248,4.76067,10.872,8.0094,0.0675153,14.2519,3.4787,2.01687,1.31971,4.26167,7.17894,8.7126,11.0442,10.6907,4.6523,14.4608,3.84364,11.1953,3.17423,13.813,5.78986,0.179991,8.3457,17.6643,3.91576,14.554,7.40706,18.6214,7.19291,10.3975,12.4217,9.0293,1.52291,18.5544,6.15809,2.3425,9.49107,12.7826,11.2793,3.06738,17.564,1.72105,1.65749,6.53471,17.4387,20.3572,8.33895,6.84383,1.43724,13.3879,0.119011,10.1069,2.4661,4.3058,17.9427,9.77185,9.55569,9.65339,4.59233,18.9743,10.9089,19.3431,10.9791,5.88551,10.9291,1.85901,9.94399,29.6266,3.9715,4.25142,4.52589,11.3661,7.15966,2.60759,8.77503,8.20097,1.91806,11.3354,8.23867,9.72884,2.5308,12.3892,16.4733,15.3325,23.2821,0.583711,20.6095,1.93144,3.20272,10.2368,9.08028,1.94494,21.1868,10.2195,0.497133,20.0998,12.3339,4.31322,4.66203,11.4002,4.4619,21.9002,13.5196,14.1545,12.9844,0.530078,7.51578,10.4851,14.0487,3.01951,7.24246,11.2679,0.133224,1.75671,13.3606,6.54439,8.31627,7.28481,4.88459,8.27551,8.95273,3.77929,11.0452,1.17426,15.9701,13.4271,3.57578,20.9752,20.7383,3.58579,14.8486,7.33155,2.9404,4.40496,6.9471,6.53876,11.0523,7.28476,5.42845,6.31787,3.73873,14.884,13.1477,1.16655,0.501532,3.77351,2.94332,3.8277,2.88535,5.64173,7.11688,13.6834,13.0923,5.01496,8.81914,15.4029,6.93686,10.0826,12.4369,24.1468,2.67887,5.68985,12.4386,7.32976,4.05454,2.19376,3.80143,5.19753,15.0258,16.8559,8.15407,6.4727,4.26583,17.8312,12.5506,9.34095,9.08509,4.29046,3.10772,3.15436,2.13924,8.97819,4.42747,4.28228,26.3014,18.8621,3.52124,7.86871,3.01397,1.55004,6.28912,6.68684,9.12224,0.0110891,5.14206,12.5682,14.9402,1.56639,7.48708,10.7252,11.3591,8.10674,0.627924,2.78069,12.9812,9.332,10.8826,7.92216,9.05006,16.2789,5.96961,8.35012,7.14273,13.8469,0.699655,7.9596,2.5099,13.363,12.7406,7.99945,6.61082,25.2595,19.3121,0.205723,7.32302,0.0544319,0.210117,15.8335,12.8469,8.2564,8.88724,0.228098,2.06229,2.03744,3.65923,0.955508,4.19029,9.3456,4.72924,1.84434,9.08328,13.0889,4.35471,8.43484,14.6133,13.6462,9.07842,1.11313,11.2562,8.37605,2.52131,8.20113,9.82768,27.9981,12.792,1.43955,19.4119,11.2969,16.6218,7.06363,7.4423,12.1988,1.45532,11.0175,7.56987,2.23265,4.87421,19.3104,3.03561,0.94848,3.07712,4.07064,6.31126,12.4766,5.17609,10.1722,3.17837,12.6677,1.42258,3.0042,4.73971,7.44868,4.76263,6.80857,2.60554,3.44345,1.93792,13.9183,2.99628,16.6533,6.80043,7.09981,10.1562,4.55082,2.00953,12.0165,4.61662,5.21784,18.5228,5.67147,5.54199,10.6544,0.470288,2.7914,5.27124,8.95977,9.17106,6.31539,22.0357,3.39213,5.66378,5.46095,0.577933,3.09667,5.21733,13.3271,7.1782,5.13537,12.3194,11.7215,5.13381,1.008,3.53859,8.55949,13.8113,4.65768,1.37673,8.87179,15.4468,2.43713,18.6301,4.23242,5.28162,12.558,19.5377,3.78733,5.54502,6.31545,1.28546,7.83179,10.3085,3.31533,4.50381,9.30679,7.94203,15.8622,11.9413,2.148,5.6551,21.1909,1.90142,0.916572,15.1408,3.23883,6.45892,5.5982,2.58822,9.11862,7.18492,17.1882,10.624,10.4852,1.22713,11.5511,11.7984,1.76707,21.2552,7.89737,12.1673,17.7236,14.4225,10.3537,0.862634,14.0637,3.50773,2.98735,6.22857,5.11493,13.0863,0.576611,9.33325,5.74974,3.13291,15.1175,10.2678,16.3847,0.153569,20.9353,0.819766,19.7182,3.897,9.50581,8.2413,2.92472,4.32097,15.5265,7.34707,3.73247,4.7596,0.632126,3.83397,2.65844,1.28323,11.0967,3.70587,0.20079,6.00508,6.46193,11.1071,0.656083,13.3013,1.41906,8.35261,5.68269,9.01508,8.78404,2.98583,4.28478,10.5541,10.2166,11.348,1.14889,4.00884,1.63094,6.0735,5.14388,0.883335,23.6372,1.83001,2.23253,9.36337,18.6812,8.78255,10.2444,19.5301,4.24001,5.52549,13.7823,1.17166,5.36451,1.46186,8.37587,8.15456,0.861563,6.9197,5.25722,6.37567,1.25869,3.16014,1.15832,4.10522,7.89572,8.49676,19.5818,9.87134,7.433,1.11862,5.43934,5.88041,8.83282,5.09139,2.9982,5.02539,12.2761,17.3056,8.97225,6.86568,13.9263,8.94996,1.07662,1.64318,2.30638,0.469862,4.49048,4.03371,0.799337,17.7395,16.035,23.2605,18.746,3.9873,6.9494,7.27584,12.4683,9.73396,5.535,14.1083,8.15552,5.86757,17.7252,2.62696,10.6959,11.2374,18.898,15.9495,1.11747,28.9308,7.11066,2.86324,9.68673,10.3956,30.9795,4.20623,2.8618,13.9275,7.31881,9.70189,13.8197,15.591,14.4391,7.51637,13.2992,2.09931,1.96585,3.8054,0.984286,9.90749,16.2725,3.54624,0.290502,0.554761,4.09472,5.45961,3.25416,11.3506,5.87248,11.4092,10.7659,4.94129,1.53863,6.63661,12.9932,21.475,5.10483,0.831926,0.792907,2.3408,5.49783,16.9935,5.47697,11.4583,10.5304,12.3409,7.61854,0.520359,1.66133,18.2488,3.0314,10.0618,3.08688,18.301,8.48996,3.32256,14.0745,1.37352,11.28,0.0555603,4.70613,1.85774,7.09381,21.3178,1.61321,0.805788,3.37066,0.9267,10.1222,10.5998,8.76959,8.27251,13.8032,5.41356,14.4909,4.14404,16.3111,9.93165,4.45402,8.4147,1.61352,6.95467,6.70135,16.3465,7.07291,20.975,13.8622,5.38699,40.7333,3.13157,6.58848,21.4731,2.26624,2.32819,0.949101,21.5308,14.4029,5.17326,12.2353,17.2257,11.7634,3.48228,0.816079,6.09022,17.1635,13.1869,15.7744,17.9126,3.02819,1.84074,4.21386,0.992223,0.0207837,16.2159,6.28467,12.9381,12.7471,7.78217,17.4505,14.6277,10.028,5.8787,1.71467,0.69576,10.9098,8.55448,12.1121,2.34209,6.28452,10.8553,12.1776,2.30277,0.723702,3.40636,9.61144,3.93914,1.42215,8.26532,1.15787,1.2186,10.8861,5.60473,4.36129,1.99041,7.37425,4.61029,11.4616,11.669,1.00294,5.36151,5.07789,1.40646,8.34742,15.6298,6.27062,2.96195,9.14874,0.713211,2.73705,0.636302,13.3607,7.68138,2.02869,0.617967,12.4278,2.18739,6.86038,0.455888,10.9626,3.80904,22.5738,3.15226,11.4095,2.29284,7.26191,11.2215,6.12693,1.47062,5.14709,21.2137,10.6815,6.81794,1.33234,22.2691,0.66674,5.98651,4.17164,18.2142,6.35707,20.6451,8.81855,8.80128,0.247357,3.09664,0.296378,0.708356,4.76113,16.1903,0.353268,3.35894,7.65317,3.5149,14.6705,4.11151,16.971,1.03118,10.4512,14.9694,2.09234,12.2829,2.91118,8.33768,6.45522,0.834377,2.47698,7.22758,1.53135,5.40798,13.1191,19.4287,5.32005,13.1372,19.9529,0.63244,15.9193,10.9286,0.186846,3.92569,4.10158,14.171,3.94111,14.7977,12.9494,2.7556,16.0554,6.1258,3.58821,9.31353,8.35003,6.47878,22.0583,5.50752,24.262,2.5205,4.77363,4.4913,6.57155,2.61047,5.65405,9.02512,14.648,11.5974,3.29613,11.567,4.96775,3.48725,9.8503,5.81612,9.6983,11.3366,5.90329,2.2772,9.21834,12.1135,1.81533,5.42731,10.9312,7.17342,18.3787,18.8169,1.42848,3.6731,2.99729,0.443279,11.5236,5.43013,3.80404,3.04221,0.15937,9.40316,7.13198,6.29644,16.283,1.416,3.24307,15.7489,9.57077,5.67842,4.51991,10.4471,1.5798,5.84458,5.34622,7.59354,15.836,12.9222,3.73127,11.9994,4.27459,12.9562,13.0391,3.77877,3.55058,0.765403,14.4085,3.12818,3.40585,5.73509,7.1499,5.7266,7.16145,3.1949,2.75544,16.7836,13.9923,6.87017,11.6269,6.33418,3.74383,11.9635,1.36019,6.19447,3.75728,1.22693,0.581375,9.61776,12.847,20.7015,14.1688,0.0342554,26.1738,13.0097,1.9261,7.50345,21.8263,20.3312,7.08651,3.55661,5.06766,3.13728,3.21051,3.21581,9.53059,10.1444,10.0834,22.9523,0.133854,5.10598,4.9891,1.92925,7.08243,5.03802,8.94141,6.25726,11.009,8.82227,8.44998,12.5254,0.798024,14.7751,1.35878,9.23544,16.7443,4.3641,5.23974,13.11,4.59759,14.7587,5.77522,5.19965,2.36512,7.66859,12.6389,10.544,8.87046,6.01554,15.0636,7.89405,2.71689,1.10768,2.41344,3.22526,3.5947,0.905388,26.1983,2.82348,3.06987,7.51688,2.41974,4.98458,1.81001,7.14783,18.5385,1.85146,15.3201,18.5859,3.56117,8.97512,2.88934,11.082,8.18603,10.7319,16.7601,7.02539,7.01149,8.78008,17.3721,2.41391,6.27289,6.95342,3.64412,15.9784,4.22943,0.541729,6.62567,4.84967,5.7996,5.45216,3.58806,17.4317,5.04395,6.35532,6.49318,2.34653,3.43849,8.43292,18.7383,1.18343,35.7305,15.6316,15.0686,11.7051,6.00626,15.2659,2.42277,9.56064,0.283797,0.27326,0.94331,5.90359,12.1224,3.97884,4.53749,5.20768,9.85924,3.37896,1.23009,1.56952,5.16047,12.8983,10.7095,0.520554,2.66796,11.0182,9.56676,7.34623,0.0364828,0.827868,7.65706,4.88026,5.72827,3.1264,5.98904,14.5114,5.55732,17.5672,6.37448,8.45508,4.72723,0.843159,4.67855,2.06964,13.1501,9.05855,15.436,0.0752967,13.2307,5.4751,0.190749,11.2638,5.56204,7.45048,25.9996,3.13793,4.33428,13.9328,12.3121,9.77178,9.9677,4.2961,8.26826,4.93331,15.548,0.792902,8.15071,7.38792,0.437186,3.22973,11.0945,5.11919,6.51594,8.66033,10.2195,7.51417,0.834108,0.641924,0.844348,2.08803,6.86363,4.64272,3.77068,1.78487,2.1793,8.02289,2.26534,2.26844,10.7079,12.3027,9.25277,6.55488,5.82473,6.10738,12.1772,7.2097,10.2395,3.82885,10.643,4.10364,1.75262,9.55819,17.1022,7.76737,21.3688,17.7545,6.82086,15.5378,2.33888,12.2333,1.80175,15.3081,9.10643,4.20701,12.3472,24.2269,4.80683,3.35469,5.73403,6.25198,6.76172,19.3405,5.6377,6.10594,8.12631,9.24972,2.39161,6.39578,19.5491,3.76003,9.66513,9.61843,2.2922,12.3925,9.82782,11.9371,0.670301,2.04804,10.7608,7.41024,3.86213,1.25075,0.631759,3.30806,9.51478,8.84371,6.07031,10.0413,5.10625,1.27383,13.0608,1.93527,7.48771,2.41168,4.49622,9.80491,5.94474,13.4047,13.2039,10.0332,10.9285,3.12414,0.752777,4.96199,0.190821,11.9415,5.07168,5.73792,3.01556,2.34982,4.06887,0.151492,7.52497,9.95061,11.7072,4.09315,9.60207,15.1662,6.69734,2.79242,1.90165,15.4889,11.8565,0.137219,9.7652,0.854846,28.1803,7.99244,17.6681,4.99619,12.0126,5.20869,2.86024,9.83178,7.02011,0.00333231,6.54122,8.01109,2.94162,5.11392,1.51971,20.8499,5.17813,2.70412,4.56814,24.9214,2.56774,4.67925,1.86196,0.745924,0.471737,2.36677,9.8229,2.20297,1.13331,19.65,1.13494,7.63038,1.38721,3.80175,2.50437,6.19225,7.80199,17.4312,11.7331,1.87485,7.63656,2.83171,22.46,5.40075,25.1354,2.94888,16.1796,0.339666,7.07364,3.36239,11.7007,3.86155,3.76741,15.3286,11.506,1.80026,19.553,1.24372,7.47657,1.40458,1.27225,9.64045,10.353,11.636,3.88063,8.0215,2.66958,6.42902,21.3529,0.0945917,0.380617,10.4706,0.654461,29.5242,16.4715,5.3013,6.61404,7.22447,5.66541,0.312567,14.8304,3.26223,10.3815,8.12377,2.88263,12.973,2.2902,3.44034,2.91955,31.0982,3.22917,10.9826,9.9731,1.16413,15.4311,2.23961,20.8376,3.68304,12.4054,7.48755,2.70152,2.37771,11.5533,29.2632,13.4831,13.6347,12.5198,0.7701,7.53136,2.20995,2.28852,3.04126,3.03212,6.04569,15.0039,7.40837,1.04658,9.52747,12.1147,6.87317,4.86895,9.93303,3.8346,2.83156,10.5466,14.4856,6.16941,14.2394,3.19208,1.00849,14.0369,3.8614,15.4254,9.84817,8.46957,26.3718,1.35212,6.48423,3.80452,7.73403,17.1129,9.40374,6.68499,0.809582,0.394764,4.83363,16.0301,20.5673,14.8444,10.5349,1.30501,14.3714,13.2392,3.94976,1.97698,22.64,11.3424,6.56935,12.0777,0.589107,7.7899,2.78111,13.605,9.53646,4.13609,10.3599,5.21385,12.5116,6.24107,14.577,6.12891,11.3812,3.35796,6.70415,1.03758,13.4822,2.97422,2.42642,3.43656,19.3909,19.5051,11.5616,4.52306,9.8296,4.57449,6.30474,4.09081,2.27222,14.2474,1.77251,6.6671,13.1941,6.25032,6.89775,2.53129,2.50392,8.23133,11.2841,7.37548,8.48867,9.53706,27.9458,27.0383,18.7114,4.7917,15.5916,2.4575,2.71148,11.1796,0.264889,11.6365,5.26818,5.84437,0.804148,13.9083,3.88699,13.4834,0.908159,15.1891,28.0325,3.72238,13.5817,1.04586,2.89473,20.7923,19.569,4.12016,14.3452,1.19376,8.32461,8.65313,14.6603,8.2385,1.56793,0.731997,8.24024,2.79602,2.87331,9.99765,0.818026,2.42978,10.5696,10.3544,10.9517,4.0566,8.85065,0.369911,0.804023,15.5246,2.98937,0.794122,5.9262,11.3096,5.25921,11.1185,14.1799,3.58442,10.9909,14.4504,10.9585,2.90499,0.435496,4.60428,9.22722,5.04977,14.0356,22.6368,4.26722,1.71692,8.59288,3.15525,1.16235,2.64132,9.87842,0.328469,10.449,2.08731,15.8672,13.3423,0.391377,3.92899,1.358,5.87541,12.5077,9.30274,5.52431,1.40941,11.3855,2.74778,16.6051,5.26296,18.0135,11.3858,14.8147,9.32564,16.756,16.219,7.65996,2.18624,5.75125,7.97373,4.90529,16.7715,7.35562,3.82761,16.7997,13.4449,0.143089,0.337898,1.64552,6.38929,14.3972,6.80372,5.80716,23.6113,15.5259,12.7359,13.7016,2.38488,5.72828,12.0308,8.71503,2.77164,6.23692,2.28522,2.07702,0.511538,0.148877,6.78744,24.9227,7.47901,11.4191,1.52375,32.2015,25.4587,9.70883,13.6184,12.0538,3.11109,12.5578,6.16865,8.92464,8.01777,8.27194,3.28303,14.3935,12.6351,0.682655,10.9961,6.23091,6.6894,15.899,3.22987,8.98574,15.7415,15.1732,1.49524,4.0651,7.97391,2.14332,21.4096,21.2382,1.15768,9.08783,0.853744,9.85786,10.0257,5.03212,4.37569,3.20955,10.2921,12.4056,11.3088,8.53134,15.4585,15.0232,2.16025,9.03947,1.65508,5.79516,1.07324,6.21358,14.986,6.66919,0.667909,13.8328,12.8896,9.70711,11.7645,1.26455,1.21066,14.0587,3.62406,6.37612,2.27588,4.34621,6.14686,0.188251,3.8607,2.46172,6.14222,11.8029,5.93364,12.5227,10.1401,17.9019,7.99235,12.6062,8.14768,0.212688,3.46288,7.56874,9.48122,4.4839,3.10817,7.69146,0.933022,2.17416,10.5752,11.0196,0.312743,6.66987,4.70262,16.1684,0.668066,1.42345,1.97572,3.77465,7.15876,8.66544,7.95061,16.2154,8.94045,4.29963,3.6703,3.99778,6.65338,3.44127,6.07608,16.6308,5.49285,5.61449,9.16648,6.00975,5.15569,16.3491,12.5451,9.1004,7.92663,14.4648,11.1099,4.43058,6.67074,16.4435,3.77763,12.6969,7.23546,11.7826,2.05697,1.33124,13.0013,6.36165,19.0569,18.6043,4.08768,10.0222,2.69527,0.300801,2.53873,5.45996,1.00555,13.8513,11.2331,8.19096,6.15625,5.19543,3.27122,21.6845,4.52626,10.1222,9.60721,13.4106,13.6062,0.6075,2.58538,1.15237,12.4096,9.24433,3.84433,6.64712,7.29303,10.7218,7.43585,8.88591,0.186274,13.9509,9.36247,10.3825,1.08243,17.3494,2.52024,6.1342,16.0383,15.38,10.5337,4.39135,1.43478,5.31962,10.7035,18.767,21.7058,13.6574,5.10198,4.4563,2.46158,10.8543,4.35623,9.98265,24.7377,1.08839,12.257,5.72629,19.4162,0.101785,25.7072,20.3198,5.1421,1.83193,18.6649,23.9761,6.69371,18.0695,14.3526,10.1393,1.63511,3.55281,3.69149,7.29765,1.07434,17.787,13.0769,12.5612,7.77649,6.32457,7.04521,14.1587,0.332209,6.18206,17.2621,12.2758,1.63058,2.02453,1.66246,7.2948,5.76891,6.07978,6.10953,13.9008,2.47382,10.3054,10.9631,24.6336,4.72058,1.4275,15.2561,12.5918,1.37216,11.3468,22.3849,5.29709,16.6739,2.8971,2.44316,10.3815,11.651,8.84495,9.3307,9.91052,0.698762,22.4431,7.68445,2.7633,0.927723,9.68757,11.5265,15.0852,5.09585,13.1753,19.0729,6.55887,5.08231,20.1926,3.57251,8.01488,9.78382,3.64581,5.97347,1.13078,5.80884,3.68494,3.03946,14.2945,9.08219,4.54343,6.20584,4.48702,4.7491,0.899114,14.5265,19.2554,23.4021,3.71516,10.5556,2.26444,6.99575,13.0537,0.505234,1.53265,21.3405,40.8244,17.3659,5.44068,21.3047,3.11328,3.84697,14.4557,1.74535,4.5853,11.3742,9.75049,9.39462,2.35652,5.86998,5.24151,9.54617,3.58082,16.2433,0.128724,0.489125,9.37772,2.14476,1.62719,8.75249,9.40533,3.98118,11.0578,12.9001,8.18227,21.9689,5.1256,3.93667,4.13527,0.709089,5.01104,4.28187,10.7154,3.78129,3.98721,4.73476,20.9728,7.01279,0.956733,6.41111,5.59875,11.9299,3.57577,6.45648,0.405151,10.1617,1.10041,9.9257,17.3054,7.55175,10.7478,2.35166,0.0980853,6.42937,2.40974,5.89327,5.068,5.70549,6.22508,8.88337,5.10958,6.92215,2.4264,2.48634,11.8222,4.70618,12.0141,9.92746,20.4094,3.65391,11.1071,1.48888,24.0234,9.2281,6.018,7.24867,8.95424,26.209,10.0444,0.548428,1.79515,8.77164,1.28009,2.83483,2.93589,5.77345,13.5164,20.6119,12.6966,19.8594,5.3893,14.6191,9.39414,11.3956,6.85907,1.08807,5.03125,1.63272,11.2358,5.91787,2.69211,21.2926,13.0204,4.85881,7.46102,3.16288,12.5093,9.16734,12.7039,5.84311,2.03861,11.8468,4.98632,5.18025,7.96672,2.70238,4.68346,2.38034,8.47097,17.4519,9.32617,12.7119,35.1221,1.14652,1.31746,5.22851,8.61759,10.5985,19.5547,13.3998,0.707831,5.80687,5.1673,5.11676,3.08089,3.1442,2.07675,7.04109,12.9675,1.58243,1.86801,9.68094,8.95717,2.37538,4.43962,3.13443,10.8175,3.11608,6.72819,8.21026,7.17029,8.27939,0.359694,6.43435,3.56067,5.88346,9.86352,6.71594,12.9717,16.1381,11.0287,6.04062,10.7368,6.65931,1.15887,0.366361,8.04904,15.0976,3.75942,6.15748,14.0024,15.3566,0.380075,1.58747,3.81287,6.89428,0.166391,14.3433,7.99582,12.7701,4.69916,6.38086,2.56176,5.74581,9.30587,4.9572,7.36455,8.40641,5.3528,7.82629,14.779,4.07187,1.71445,1.0747,4.26905,5.37158,12.193,1.34468,8.5814,2.34381,29.7142,12.6273,7.90038,13.1717,2.03396,8.81503,5.28324,9.1121,13.4264,0.446169,5.74204,11.0731,1.23263,29.0455,0.748131,23.3077,6.5392,5.13194,7.15436,22.0006,16.2893,19.2537,4.53109,5.2565,16.3768,14.5538,0.399029,10.5313,9.61355,8.26835,9.66625,4.50534,4.59728,3.12843,2.19049,7.05586,12.5047,6.52303,1.70802,6.77983,2.50136,15.5532,5.61165,8.51254,11.826,4.84571,0.303809,8.6638,6.04069,9.44863,9.68089,7.27799,18.4533,16.7281,4.26031,14.8414,1.26212,8.33263,2.84169,3.90803,7.89583,4.75419,8.73123,1.25632,16.9128,0.943844,2.81671,10.2357,12.869,16.3576,3.27974,13.3079,6.37404,7.67572,10.2933,2.38789,20.6525,0.515079,2.11141,10.0159,2.00773,17.5532,12.249,2.61916,5.4981,15.2178,16.5987,20.1364,10.4327,2.98854,22.9662,5.40361,5.55882,1.88208,8.36608,19.034,7.95504,2.2891,0.777985,5.97077,9.03526,13.0604,5.67891,1.66269,15.4656,2.55535,9.56165,3.95633,12.5415,21.2699,1.24541,7.34461,4.49897,0.145804,14.6426,11.2612,2.66335,9.26799,10.0895,3.21282,17.587,12.1541,0.740234,0.612895,0.999333,6.24189,3.73852,6.2983,7.97511,5.01227,1.73672,6.65287,3.76934,8.00214,8.80889,17.8472,2.13694,7.96221,2.98716,1.61269,10.5117,11.5547,6.30012,1.33754,15.4149,7.11009,0.588629,15.6206,4.50537,3.75603,7.92807,18.7304,3.61166,20.1362,11.053,10.0282,12.0056,0.321887,5.84906,22.4165,9.72498,3.5071,9.85132,1.8305,7.01934,5.58541,6.55071,6.46262,12.1029,21.6633,0.39436,7.47365,7.76642,5.63096,3.67451,1.65392,0.462986,1.61467,3.7111,3.19959,1.99648,8.83089,6.1008,2.09509,11.7076,25.4284,10.9602,13.7952,10.5089,7.3238,2.47511,7.03876,5.12931,3.75642,9.22257,12.361,8.5787,6.05806,27.1934,3.67515,9.52716,3.2235,6.65189,4.75539,17.9309,3.29399,7.94287,6.72287,14.6125,13.7865,0.254708,12.9485,11.4164,5.75245,1.90084,33.1152,4.03085,3.19945,2.09985,5.06474,21.9629,19.1928,2.11835,15.3236,12.3207,8.49344,7.96448,7.0046,12.5043,16.9286,4.82177,1.41205,5.54506,11.6488,26.3366,7.36736,9.16803,11.842,2.74911,9.12555,10.7525,3.82566,2.16898,3.18535,22.0239,8.27517,0.96049,2.91045,4.65144,2.01213,27.8705,9.38171,29.647,13.0054,6.43361,15.4047,12.1386,16.1253,14.5181,2.55197,21.7035,3.89717,1.159,2.26264,33.0547,2.01399,5.564,5.26458,7.2534,12.6827,18.1922,5.03675,12.5532,5.9356,2.38894,2.96985,6.07068,5.74469,7.67458,8.13582,3.36345,1.04324,9.00678,2.83116,14.1677,2.57122,9.22131,14.3464,14.9519,18.3023,4.68021,10.3143,2.06755,13.4486,1.64363,6.21247,1.64223,12.4679,3.96426,1.86693,8.27487,8.03335,10.4134,2.58334,1.47296,0.629426,2.53378,1.58164,11.7719,7.43945,6.57847,10.8647,15.3907,11.22,0.353785,2.02982,1.54524,5.77391,1.64597,12.5086,22.1429,24.4582,16.9939,3.19144,22.4016,9.44387,0.863634,5.13242,17.4395,4.80122,6.01558,11.2055,5.15459,18.6102,0.306471,0.335639,0.464607,12.6357,1.9038,5.22454,13.8268,0.624219,5.57087,5.96075,6.51977,5.87371,4.35431,2.96282,4.16307,2.67688,13.8705,8.17348,9.71134,8.89542,7.26164,7.17952,4.04183,18.3836,1.54395,2.04912,7.00979,5.07866,9.56413,0.0666408,12.4844,4.10209,14.1052,1.77612,1.92695,1.87179,11.1762,13.0235,1.40755,14.5811,16.6109,11.8343,1.833,0.210312,23.2825,1.26073,2.88007,19.8874,4.44662,8.75388,1.91293,11.6024,0.275368,1.7248,15.4728,3.39957,13.9314,10.9039,2.80037,1.20128,3.07738,1.26465,3.19619,4.32448,6.5891,3.41239,1.58476,0.905488,28.9308,0.0842511,2.47403,3.5548,6.46275,3.53637,5.49457,9.45562,15.2601,10.3827,11.1092,0.699095,16.0511,5.08189,10.7995,7.4738,0.29609,13.3084,0.0186614,17.0073,14.125,13.3304,22.0915,4.30707,1.04874,13.2831,4.69434,2.41544,1.71817,8.83889,9.93173,23.384,1.1389,15.8362,14.9118,5.51871,4.61149,17.9395,2.12574,6.84379,14.699,30.508,24.8868,8.37033,2.3073,2.66584,15.7153,1.73131,0.526768,8.89891,5.57265,13.4207,6.39065,8.62507,18.9763,5.50738,0.122107,6.83564,13.5218,11.9525,16.5482,11.6617,0.502659,12.5509,1.84908,3.3674,4.61655,1.77682,0.650117,13.4571,3.69996,6.44602,22.0895,1.03695,9.82611,6.40233,0.137325,0.728185,0.598168,6.88074,23.0972,15.4933,15.345,5.03136,8.15556,3.89547,13.4452,0.240735,12.1446,6.97234,6.25196,19.2405,10.741,14.5156,8.17614,18.6836,9.77533,22.214,21.2774,4.80185,10.566,15.7608,4.69753,4.03355,15.5691,8.36567,2.35756,10.1005,3.05947,9.17986,6.98634,13.4025,10.4789,0.852625,3.18768,14.0273,1.08873,2.81415,12.4511,5.19294,7.29796,6.66006,10.9839,4.40394,6.96575,19.333,8.36495,5.64366,3.11524,1.32877,8.86567,11.6819,7.55046,7.98281,15.2538,4.86231,4.88036,8.45871,4.45779,2.24273,4.06553,5.96351,16.2639,11.4983,3.14206,9.78667,8.9791,16.7041,10.828,16.5132,13.802,10.936,17.1747,7.19207,6.98004,23.8225,4.46412,0.897439,21.2315,8.27015,13.3149,6.8047,0.937611,13.248,18.5875,16.4969,10.2383,0.0393193,1.332,7.47724,1.00581,14.7064,11.7578,7.2354,7.59551,7.92254,14.0301,1.45645,12.6061,9.57645,7.64452,12.1484,7.48159,12.7327,3.77052,12.6718]
    b = np.ones(2*batch_size)/batch_size
    linprog(c,A_eq=A,b_eq=b,options={"disp": True,'maxiter':15000})
